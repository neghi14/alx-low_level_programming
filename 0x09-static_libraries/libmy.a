!<arch>
0-isupper.c/    0           0     0     644     268       `
#include "main.h"
/**
 * _isupper - function
 * @c: first operand
 *
 * Description: checking for uppercase letters.
 * Return: 1 if uppercase, 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (c);
}
0-memset.c/     0           0     0     644     415       `
#include "main.h"
/**
 * _memset - function
 * @s: A pointer to the memory area to be filled.
 * @b: The character to fill the memory area with.
 * @n: The number of bytes to be filled.
 *
 * Description: Function to fill memory with a constant byte
 * Return: pointer to filled memory of s
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		s[i] = b;

	return (s);
}

0-strcat.c/     0           0     0     644     341       `
#include "main.h"
/**
 * _strcat - function
 * @dest: add to string
 * @src: add from string
 *
 * function to concat two strings
 * Return: dest
 */
char *_strcat(char *dest, char *src)
{
	int len;
	int len2;

	for (len = 0; dest[len]; len++)
		;
	for (len2 = 0; src[len2]; len2++)
	{
		dest[len] = src[len2];
		len++;
	}
	return (dest);
}

100-atoi.c/     0           0     0     644     219       `
#include "main.h"
/**
 * _atoi - function
 * @s: string to convert
 *
 * Description: function to convert a string to an integer
 * Return: 0
 */
int _atoi(char *s)
{
	int i = 0;

	while (s[i])
	{
		;
	}
	return (0);
}

1-isdigit.c/    0           0     0     644     273       `
#include "main.h"
/**
 * _isdigit - function
 * @c: first operand
 *
 * Description: checks for a digit (0 through 9)
 * Return: 1 if c is a digit, 0 otherwise.
 */
int _isdigit(int c)
{
	if (c >= 48 && c <= 57)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (c);
}

1-memcpy.c/     0           0     0     644     336       `
#include "main.h"
/**
 * _memcpy - function
 * @src: copy memory from
 * @dest: copy memory area to
 * @n: memory bytes parameter
 *
 * Description: function to copy memory area
 * Return: dest.
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
		dest[i] = src[i];

	return (dest);
}
1-strncat.c/    0           0     0     644     419       `
#include "main.h"
/**
 * _strncat - function
 * @dest: destination of copy
 * @src: source of copy
 * @n: string limit of copy
 *
 * Description: concats two strings together limited by n
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int len, len2;

	for (len = 0; dest[len]; len++)
		;
	for (len2 = 0; src[len2]; len2++)
	{
		if (n > len2)
			dest[len] = src[len2];
		len++;
	}
	return (dest);
}

2-strchr.c/     0           0     0     644     402       `
#include "main.h"
#define NULL 0
/**
 * _strchr - function
 * @s: string to search in
 * @c: char to return
 *
 * Description: function to locate a character in a string
 * Return: pointer with first c or NULL if none
 */
char *_strchr(char *s, char c)
{
	for (;; s++)
	{
		if (*s == c)
		{
			return (s);
		}
		if (*s == c && c == NULL)
			return (s);
		if (*s == NULL)
			break;
	}
	return (NULL);
}
2-strlen.c/     0           0     0     644     285       `
#include <stdio.h>
#include "main.h"
/**
 * _strlen - function
 * @s: first operand & pointer
 *
 * Description: function that returns the length of a string
 * Return: Always 0
 */
int _strlen(char *s)
{
	int index = 0;

	while (*s != '\0')
	{
		index++;
		s++;
	}
	return (index);
}

2-strncpy.c/    0           0     0     644     393       `
#include "main.h"
/**
 * _strncpy - function
 * @dest: copy to string
 * @src: copy from string
 * @n: at parameter
 *
 * Description: copies a string to the nth value.
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int len;

	for (len = 0; src[len]; len++)
	{
		if (n > len)
			dest[len] = src[len];
	}
	for (; n > len; len++)
	{
		dest[len] = '\0';
	}
	return (dest);
}

3-islower.c/    0           0     0     644     297       `
#include "main.h"
/**
 * _islower - function to check for lowercase char
 * @c: first operand
 *
 * Description:check for lowercase letters
 * Return: 1 if c is lowercase, 0 otherwise
 */
int _islower(int c)
{
	if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (c);
}

3-puts.c/       0           0     0     644     263       `
#include "main.h"
/**
 *_puts - function
 * @str: first operand and pointer
 *
 * Description: prints a string, followed by a new line to stdout
 * Return: string
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str);
		str++;
	}
	_putchar(10);
}

3-strcmp.c/     0           0     0     644     331       `
#include "main.h"
/**
 * _strcmp - function
 * @s1: comparing string
 * @s2: comparing string
 *
 * Description: compare str1 to str2
 * Return: str1, str2
 */
int _strcmp(char *s1, char *s2)
{
	int len;

	for (len = 0; s1[len] && s2[len];)
	{
		if (s1[len] == s2[len])
			len++;
		else
			break;
	}
	return (s1[len] - s2[len]);
}

3-strspn.c/     0           0     0     644     551       `
#include "main.h"
#define NULL 0
/**
 * _strspn - function
 * @s: return num bytes of
 * @accept: bytes from
 *
 * Description: function to get through length of prefix substring
 * Return: s
 */
unsigned int _strspn(char *s, char *accept)
{
	int i, j, counter;

	counter = 0;

	if (*s == NULL || *accept == NULL)
		return (0);

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				counter++;
				break;
			}
			else if (*(accept + j + 1) == '\0')
			{
				return (counter);
			}
		}
	}
	return (counter);
}

4-isalpha.c/    0           0     0     644     376       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: First operand
 *
 * Description: checks for lower and upper alpha chars
 * Return:1 if c is a letter, lowercase or uppercase, 0 otherwise
 */
int _isalpha(int c)
{
	if (c >= 65 && c <= 90)
	{
		return (1);
	}
	else if (c >= 97 && c <= 122)
	{
		return (1);
	}
	else
	{
		return (0);
	}
	return (c);
}
4-strpbrk.c/    0           0     0     644     460       `
#include "main.h"
#define NULL 0
/**
 * _strpbrk - function
 * @s: string to search in first  occur
 * @accept: string parameter set
 *
 * Description: function that searches a string for any of a set of bytes.
 * Return: pointer to type s or null
 */
char *_strpbrk(char *s, char *accept)
{
	int i, j;

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{
			if (s[i] == accept[j])
			{
				return (&s[i]);
			}
		}
	}
	return (NULL);

	return (0);
}
5-strstr.c/     0           0     0     644     581       `
#include "main.h"
#define NULL 0
/**
 * _strstr - function
 * @haystack: string to search in
 * @needle: substring to find in string
 *
 * Description: function that locates a substring
 * Return: pointer to begin at substring or null
 */
char *_strstr(char *haystack, char *needle)
{
	int c = 0;
	int c2 = 0;

	if (needle[0] == '\0')
	{
		return (&haystack[0]);
	}

	while (haystack[c])
	{
		if (haystack[c] == needle[c2])
		{
			c++;
			c2++;

			if (needle[c2] == '\0')
				return (&haystack[c - c2]);
		}
		else
		{
			c++;
			c = (c - c2);
			c2 = 0;
		}
	}
	return ('\0');
}

6-abs.c/        0           0     0     644     250       `
#include "main.h"
/**
 * _abs - function
 * @r: First operand
 *
 * Description: computes the absolute value of an integer.
 * Return: Always 0 (Success)
 */
int _abs(int r)
{
	if (r > 0)
	{
		return (r);
	}
	else
	{
		return (-r);
	}
	return (0);
}
9-strcpy.c/     0           0     0     644     299       `
#include "main.h"
/**
 * _strcpy - function
 * @src: copy from
 * @dest: copy to
 *
 * Description: copies strng pnted by src to dest with null
 * Return: char
 */
char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i]; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);
}

main.c/         0           0     0     644     142       `
#include "main.h"

int main(void)
{
	_puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
	return (0);
}
_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

